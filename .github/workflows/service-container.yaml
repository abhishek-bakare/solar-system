name: Solar system service container workflow
on:
    workflow_dispatch: 
    push:            
        branches: 
            - main
            - 'feature/*'       

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}               
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
    unit-testing:
        name: This is unit testing
        services:                                   # service job container
          mongo-db:                                 # name for the service cont
            image: siddharth67/mongo-db:non-prod
            ports:
                - 27017:27017
        env:                                        # even if we defined env vars workflow level, job level has higher precedance
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user                             
            MONGO_PASSWORD: non-prod-password       # this needs to be secrets
        strategy:
            matrix:
                nodejs_versions: [18, 20]
                os: [ubuntu-latest]
                exclude:
                    - nodejs_versions: 18
                      os: macos-latest

        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout repo
              uses: actions/checkout@v4 
              
            - name: Setup NodeJs-${{ matrix.nodejs_versions }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.nodejs_versions }}
            
            - name: Cache dependencies
              uses: actions/cache@v4
              with: 
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}  
                #the key required to create & store the cache & identify it. We use hashFiles for package-lock file so everytime when we change the package.json new lock file is created, based on that new cache key will created.
            
            - name: Install dependencies
              run: npm install
              
            - name: Unit testing
              id: unit-testing-cmd              # we can create & use this id as a conditions or logics in other steps   
              run: npm test

            - name: Upload a file               # upload test cases file
              uses: actions/upload-artifact@v4
              continue-on-error: true
              if: always()
              # always run this step if earlier step is failure or success                    
              with:
                name: test-result
                path: test-results.xml

    code-coverage:
        name: This is code coverage
        container:                              # we using container job, so no need to install node on host os
            image: node:18
        services:                               # using the service for mongo. Both containers are running on same host os so it using same net bridge no need to configure networking bet them
            mongo-db:                           # this is cont to cont so no need to setup ports
                image: siddharth67/mongo-db:non-prod
                options:
                    --name mongo
        env:                                        
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user                             
            MONGO_PASSWORD: non-prod-password          
        runs-on: ubuntu-latest
        steps:
            - name: Checkout 
              uses: actions/checkout@v4

            #- name: Install nodejs
             # uses: actions/setup-node@v3
              #with:
               # node-version: 18

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}    
                
            - name: Install dependencies
              run: npm install
            
            - name: Run coverage
              continue-on-error: true  
              run: npm run coverage
            
            - name: Archive coverage reports
              uses: actions/upload-artifact@v4  
              with:
                name: coverage-report
                path: coverage
                retention-days: 5       # retention period of 5 days 

    docker-login:
      name: Containerization
      permissions:                  # permissions for GITHUB TOKEN, default is read
        packages: write             # we have added write also
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
          
        - name: Docker login
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: GHCR login (github containerRegistry)
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}    

        #- name: Build the image & push to hub
         # uses: docker/build-push-action@v6
          #with:
           # context: .                            # define the place of dockefile . means current dir
           # push: true                           # false: don't push image
            #tags: |
             # ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}      
              #ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }} 
            #to push to the dockerhub         
            #this will push to the ghcr.io cr

    dev-deploy:                                     # deploying to k8
        runs-on: ubuntu-latest
        needs: docker-login
        steps:
            - name: checkout
              uses: actions/checkout@v4
            
            - name: Install Kubectl CLI
              uses: azure/setup-kubectl@v4
              with:
                version: 'v1.26.0'

            - name: Setup kubeconfig                # before using kubectl we need to kubeconfig
              uses: azure/k8s-set-context@v3
              with:
                method: kubeconfig
                kubeconfig: ${{ secrets.KUBECONFIG }}  
                
            - name: Verifying kubectl
              run: |
                kubectl version --short
                echo -------------------------------------------
                kubectl get nodes      



        





        